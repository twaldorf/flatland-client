// styleUtils.ts
// Generated by LLM

export type CanvasCtx = CanvasRenderingContext2D | OffscreenCanvasRenderingContext2D;

// ─── FILL STYLES ────────────────────────────────────────────────────────────────

/** A light, semi-opaque white fill */
export function setLightFill(ctx: CanvasCtx) {
  ctx.fillStyle = 'rgba(255, 255, 255, 0.6)';
}

/** A darker, semi-opaque gray fill */
export function setDarkFill(ctx: CanvasCtx) {
  ctx.fillStyle = 'rgba( 50,  50,  50, 0.6)';
}

/** Any custom gray fill at the given alpha (default 0.5) */
export function setGrayFill(ctx: CanvasCtx, alpha = 0.5) {
  ctx.fillStyle = `rgba(128, 128, 128, ${alpha})`;
}

// Outline styles

// Solid stroke in given color & width
export function setSolidStroke(
  ctx: CanvasCtx,
  color: string = '#000',
  lineWidth: number = 1
) {
  ctx.strokeStyle = color;
  ctx.lineWidth   = lineWidth;
  ctx.setLineDash([]);
}

// Dashed stroke in given color & width (default black, 1px, 5/5 dash)
export function setDashedStroke(
  ctx: CanvasCtx,
  color: string = '#000',
  lineWidth: number = 1,
  dash: number[] = [5, 5]
) {
  ctx.strokeStyle = color;
  ctx.lineWidth   = lineWidth;
  ctx.setLineDash(dash);
}

// Combi styles

/** Dashed outline (black) plus a light white fill */
export function setDashedOutlineWithLightFill(ctx: CanvasCtx) {
  setLightFill(ctx);
  setDashedStroke(ctx, '#000', 1, [5, 5]);
}

/** Solid outline (dark gray) plus a dark fill */
export function setSolidOutlineWithDarkFill(ctx: CanvasCtx) {
  setDarkFill(ctx);
  setSolidStroke(ctx, '#333', 1);
}

// Lines

/** A very light, thin line (e.g. for subtle grids) */
export function setLightLine(ctx: CanvasCtx) {
  ctx.strokeStyle = '#eee';
  ctx.lineWidth   = 0.5;
  ctx.setLineDash([]);
}

/** A heavier dark line (e.g. for axes or borders) */
export function setDarkLine(ctx: CanvasCtx) {
  ctx.strokeStyle = '#333';
  ctx.lineWidth   = 2;
  ctx.setLineDash([]);
}

// Highlights

// Highlighted
export function setHighlightStyle(ctx: CanvasCtx) {
  ctx.strokeStyle = '#f00';
  ctx.fillStyle   = 'rgba(255, 0, 0, 0.3)';
  ctx.lineWidth   = 2;
  ctx.setLineDash([4, 2]);
}

// Selected shape (e.g. click-selected)
export function setSelectionStyle(ctx: CanvasCtx) {
  ctx.strokeStyle = '#00f';
  ctx.fillStyle   = 'rgba(0, 0, 255, 0.1)';
  ctx.lineWidth   = 2;
  ctx.setLineDash([3, 3]);
}

/** Control-handle circles (unselected) */
export function setHandleStyle(ctx: CanvasCtx) {
  ctx.fillStyle   = '#fff';
  ctx.strokeStyle = '#000';
  ctx.lineWidth   = 1;
  ctx.setLineDash([]);
}

/** Control-point markers (selected) */
export function setControlPointStyle(ctx: CanvasCtx) {
  ctx.fillStyle   = '#f00';
  ctx.strokeStyle = '#f00';
  ctx.lineWidth   = 1;
  ctx.setLineDash([]);
}

// Misc

export function setGridStyle(ctx: CanvasCtx) {
  ctx.strokeStyle = 'rgba(0, 0, 0, 0.1)';
  ctx.lineWidth   = 0.5;
  ctx.setLineDash([2, 4]);
}

export function setPreviewStyle(ctx: CanvasCtx) {
  ctx.strokeStyle = 'rgba(0, 0, 0, 0.4)';
  ctx.fillStyle   = 'rgba(0, 0, 0, 0.2)';
  ctx.lineWidth   = 1;
  ctx.setLineDash([6, 4]);
}
